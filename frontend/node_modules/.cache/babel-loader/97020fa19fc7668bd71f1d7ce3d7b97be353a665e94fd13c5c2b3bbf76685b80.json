{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { problemsApi } from '../services/api';\nexport const useProblemStats = () => {\n  _s();\n  const [stats, setStats] = useState({\n    totalProblems: 0,\n    easy: 0,\n    medium: 0,\n    hard: 0,\n    recentActivity: [],\n    rank: 0,\n    rating: 0,\n    loading: true,\n    error: null\n  });\n  const fetchStats = async () => {\n    try {\n      setStats(prev => ({\n        ...prev,\n        loading: true,\n        error: null\n      }));\n\n      // In a real app, we would fetch this data from the backend\n      // const [statsResponse, activityResponse] = await Promise.all([\n      //   problemsApi.getStats(),\n      //   problemsApi.getRecentActivity()\n      // ]);\n\n      // Mock data for now\n      const mockStats = {\n        totalProblems: 42,\n        easy: 20,\n        medium: 18,\n        hard: 4,\n        rank: 1245,\n        rating: 1650\n      };\n      const mockActivity = [{\n        id: 1,\n        problem: 'Two Sum',\n        platform: 'LeetCode',\n        date: '2023-10-20',\n        difficulty: 'Easy'\n      }, {\n        id: 2,\n        problem: 'Add Two Numbers',\n        platform: 'LeetCode',\n        date: '2023-10-19',\n        difficulty: 'Medium'\n      }, {\n        id: 3,\n        problem: 'Longest Substring Without Repeating Characters',\n        platform: 'LeetCode',\n        date: '2023-10-18',\n        difficulty: 'Medium'\n      }];\n      setStats({\n        ...mockStats,\n        recentActivity: mockActivity,\n        loading: false\n      });\n    } catch (error) {\n      console.error('Error fetching problem stats:', error);\n      setStats(prev => {\n        var _error$response, _error$response$data;\n        return {\n          ...prev,\n          loading: false,\n          error: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Failed to load problem statistics'\n        };\n      });\n    }\n  };\n  useEffect(() => {\n    fetchStats();\n  }, []);\n  const refetch = () => {\n    fetchStats();\n  };\n  return {\n    ...stats,\n    refetch\n  };\n};\n_s(useProblemStats, \"o9SkYs7FHjglYo2GTjIaOESd0yA=\");","map":{"version":3,"names":["useState","useEffect","problemsApi","useProblemStats","_s","stats","setStats","totalProblems","easy","medium","hard","recentActivity","rank","rating","loading","error","fetchStats","prev","mockStats","mockActivity","id","problem","platform","date","difficulty","console","_error$response","_error$response$data","response","data","message","refetch"],"sources":["E:/DevTrail/frontend/src/hooks/useProblemStats.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { problemsApi } from '../services/api';\n\nexport const useProblemStats = () => {\n  const [stats, setStats] = useState({\n    totalProblems: 0,\n    easy: 0,\n    medium: 0,\n    hard: 0,\n    recentActivity: [],\n    rank: 0,\n    rating: 0,\n    loading: true,\n    error: null\n  });\n\n  const fetchStats = async () => {\n    try {\n      setStats(prev => ({ ...prev, loading: true, error: null }));\n      \n      // In a real app, we would fetch this data from the backend\n      // const [statsResponse, activityResponse] = await Promise.all([\n      //   problemsApi.getStats(),\n      //   problemsApi.getRecentActivity()\n      // ]);\n      \n      // Mock data for now\n      const mockStats = {\n        totalProblems: 42,\n        easy: 20,\n        medium: 18,\n        hard: 4,\n        rank: 1245,\n        rating: 1650,\n      };\n      \n      const mockActivity = [\n        { id: 1, problem: 'Two Sum', platform: 'LeetCode', date: '2023-10-20', difficulty: 'Easy' },\n        { id: 2, problem: 'Add Two Numbers', platform: 'LeetCode', date: '2023-10-19', difficulty: 'Medium' },\n        { id: 3, problem: 'Longest Substring Without Repeating Characters', platform: 'LeetCode', date: '2023-10-18', difficulty: 'Medium' },\n      ];\n      \n      setStats({\n        ...mockStats,\n        recentActivity: mockActivity,\n        loading: false\n      });\n      \n    } catch (error) {\n      console.error('Error fetching problem stats:', error);\n      setStats(prev => ({\n        ...prev,\n        loading: false,\n        error: error.response?.data?.message || 'Failed to load problem statistics'\n      }));\n    }\n  };\n\n  useEffect(() => {\n    fetchStats();\n  }, []);\n\n  const refetch = () => {\n    fetchStats();\n  };\n\n  return { ...stats, refetch };\n};\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,iBAAiB;AAE7C,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAAC;IACjCO,aAAa,EAAE,CAAC;IAChBC,IAAI,EAAE,CAAC;IACPC,MAAM,EAAE,CAAC;IACTC,IAAI,EAAE,CAAC;IACPC,cAAc,EAAE,EAAE;IAClBC,IAAI,EAAE,CAAC;IACPC,MAAM,EAAE,CAAC;IACTC,OAAO,EAAE,IAAI;IACbC,KAAK,EAAE;EACT,CAAC,CAAC;EAEF,MAAMC,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAI;MACFV,QAAQ,CAACW,IAAI,KAAK;QAAE,GAAGA,IAAI;QAAEH,OAAO,EAAE,IAAI;QAAEC,KAAK,EAAE;MAAK,CAAC,CAAC,CAAC;;MAE3D;MACA;MACA;MACA;MACA;;MAEA;MACA,MAAMG,SAAS,GAAG;QAChBX,aAAa,EAAE,EAAE;QACjBC,IAAI,EAAE,EAAE;QACRC,MAAM,EAAE,EAAE;QACVC,IAAI,EAAE,CAAC;QACPE,IAAI,EAAE,IAAI;QACVC,MAAM,EAAE;MACV,CAAC;MAED,MAAMM,YAAY,GAAG,CACnB;QAAEC,EAAE,EAAE,CAAC;QAAEC,OAAO,EAAE,SAAS;QAAEC,QAAQ,EAAE,UAAU;QAAEC,IAAI,EAAE,YAAY;QAAEC,UAAU,EAAE;MAAO,CAAC,EAC3F;QAAEJ,EAAE,EAAE,CAAC;QAAEC,OAAO,EAAE,iBAAiB;QAAEC,QAAQ,EAAE,UAAU;QAAEC,IAAI,EAAE,YAAY;QAAEC,UAAU,EAAE;MAAS,CAAC,EACrG;QAAEJ,EAAE,EAAE,CAAC;QAAEC,OAAO,EAAE,gDAAgD;QAAEC,QAAQ,EAAE,UAAU;QAAEC,IAAI,EAAE,YAAY;QAAEC,UAAU,EAAE;MAAS,CAAC,CACrI;MAEDlB,QAAQ,CAAC;QACP,GAAGY,SAAS;QACZP,cAAc,EAAEQ,YAAY;QAC5BL,OAAO,EAAE;MACX,CAAC,CAAC;IAEJ,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdU,OAAO,CAACV,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACrDT,QAAQ,CAACW,IAAI;QAAA,IAAAS,eAAA,EAAAC,oBAAA;QAAA,OAAK;UAChB,GAAGV,IAAI;UACPH,OAAO,EAAE,KAAK;UACdC,KAAK,EAAE,EAAAW,eAAA,GAAAX,KAAK,CAACa,QAAQ,cAAAF,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBG,IAAI,cAAAF,oBAAA,uBAApBA,oBAAA,CAAsBG,OAAO,KAAI;QAC1C,CAAC;MAAA,CAAC,CAAC;IACL;EACF,CAAC;EAED7B,SAAS,CAAC,MAAM;IACde,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMe,OAAO,GAAGA,CAAA,KAAM;IACpBf,UAAU,CAAC,CAAC;EACd,CAAC;EAED,OAAO;IAAE,GAAGX,KAAK;IAAE0B;EAAQ,CAAC;AAC9B,CAAC;AAAC3B,EAAA,CAhEWD,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}